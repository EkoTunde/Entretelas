def get_price(self):
        components = components_to_keys()

        var height = $('#height').val() == "" ? 0: $('#height').val();
      var width = $('#width').val() == "" ? 0 : $('#width').val();
      var perimeter = (height * 2) + (width * 2);
      $('#perimeter').val(perimeter);
      var measures = {
        "Alto": height,
        "Ancho": width,
        "Perimetro": perimeter,
      
      var iter_items = [1,2,3];
      var amount = 0;
      for (var i = 0; i < 3; i++) {
          amount += getComponentAmount(measures, iter_items[i],false);
      }
      amount += getComponentAmount(measures, "manuf",true);
      $('#amount').val(toMoney(amount));
      var quantity = Number($('#quantity').val());
      var total = toMoney(amount * quantity);
      $('#total').val(total);

      function getComponentAmount(measures, nro, manuf) {
      var name = $('#item_'+ nro).val();
      if (name == "Elegir") return 0;
      var material = manuf ? costs[name] : materials[name];
      var mult_by = $('#mult_' + nro).val();
      if (mult_by == "Nada") return material * 1;
      var factor = $('#factor_' + nro).val().trim() == "" ? 1 : Number($('#factor_' + nro).val().trim());
      var measure = measures[mult_by] == "" ? 0 : measures[mult_by] ;
      if (factor == 1) return material * measure;
      var tolerance = $('#tolerance_' + nro).val().trim() == "" ? 0 : Number($('#tolerance_' + nro).val().trim());
      var times_it_fits = parseInt(measure/factor);
      return material * (measure - (times_it_fits * factor) > tolerance ? times_it_fits+1 : times_it_fits);


def get_component_total(self, comp):
        material = comp['raw_material']
        print('\nmaterial', material)
        if material is None:
            print('returning material none so 0')
            return Decimal(0)
        print('price is', material.price)

        mult_by = comp['multiply_by']
        print('mult_by', mult_by)
        if mult_by is self.NONE:
            print("returning material's price cause multby is NONE")
            return Decimal(material.price)

        factor = comp['factor']
        print('factor', factor)
        measure = self.get_measures()[mult_by]
        print('measure is', measure)

# from orders.models import Order
# orders = Order.objects.all()
# order = orders[0]
# items = order.items.all()
# item = items[0]
# item.calculate_total()

        if factor == 1:
            print('factor is 1, returnig price * measure ->',
                  Decimal(material.price)*Decimal(measure))
            return Decimal(material.price) * Decimal(measure)

        tolerance = comp['tolerance']
        times_it_fits = int(measure/factor)
        print('tolerance', tolerance)
        print('times_it_fits', times_it_fits)

        intolerant = measure - (times_it_fits * factor) > tolerance
        if intolerant:
            print('intolerance so fits+1')
            times_it_fits += 1
        print('all right, returning', Decimal(material.price * times_it_fits))
        return Decimal(material.price * times_it_fits)